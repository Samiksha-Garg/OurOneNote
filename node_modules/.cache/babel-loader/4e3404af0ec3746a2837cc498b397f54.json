{"ast":null,"code":"var _jsxFileName = \"/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Canvas() {\n  _s();\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [width, setWidth] = useState(1050);\n  const [height, setHeight] = useState(585);\n\n  const prepareDrawing = () => {\n    const canvas = canvasRef.current;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n\n    if (offsetX > width / 4) {\n      setWidth(prev => {});\n      const canvas = canvasRef.current;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      const context = canvas.getContext(\"2d\");\n      context.scale(2, 2);\n      context.lineCap = \"round\";\n      context.strokeStyle = \"black\";\n      context.lineWidth = 5;\n      contextRef.current = context;\n    }\n\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    id: \"canvas\",\n    width: width * 2,\n    height: height * 2,\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Canvas, \"MrZfm2CqAVWxcAqrbe16FRzB3vM=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx"],"names":["React","useState","useRef","useEffect","Canvas","isDrawing","setIsDrawing","canvasRef","contextRef","width","setWidth","height","setHeight","prepareDrawing","canvas","current","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","prev","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nfunction Canvas() {\n\n    const [isDrawing, setIsDrawing] = useState(false)\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    const [width, setWidth] = useState(1050);\n    const [height, setHeight] = useState(585);\n\n    const prepareDrawing = () => {\n        const canvas = canvasRef.current\n\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        const context = canvas.getContext(\"2d\")\n        context.scale(2, 2);\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        const context = canvas.getContext(\"2d\")\n        context.scale(2, 2);\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }, []);\n\n    const startDrawing = ({ nativeEvent }) => {\n\n        const { offsetX, offsetY } = nativeEvent;\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    };\n\n    const finishDrawing = () => {\n        contextRef.current.closePath();\n        setIsDrawing(false);\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n\n        if (offsetX > width / 4) {\n            setWidth(prev => {\n\n            });\n\n            const canvas = canvasRef.current\n\n            canvas.style.width = `${width}px`;\n            canvas.style.height = `${height}px`;\n\n            const context = canvas.getContext(\"2d\")\n            context.scale(2, 2);\n            context.lineCap = \"round\";\n            context.strokeStyle = \"black\";\n            context.lineWidth = 5;\n            contextRef.current = context;\n        }\n\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n    };\n\n\n\n    return <canvas\n        ref={canvasRef}\n        id=\"canvas\"\n        width={width * 2}\n        height={height * 2}\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrawing}\n        onMouseMove={draw}\n    >\n\n    </canvas>\n}\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}