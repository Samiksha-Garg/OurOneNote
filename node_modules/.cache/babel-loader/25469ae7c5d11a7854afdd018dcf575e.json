{"ast":null,"code":"var _jsxFileName = \"/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Canvas() {\n  _s();\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth * 2);\n  const [height, setHeight] = useState(window.innerHeight * 2);\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = window.innerWidth * 2;\n    // canvas.height = window.innerHeight * 2;\n\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n\n    if (offsetX > width / 4) {\n      contextRef.save;\n      setWidth(width * 2);\n    }\n\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    style: {\n      flex: \"1\",\n      overflowY: \"scroll\",\n      overflowX: \"scroll\"\n    },\n    ref: canvasRef,\n    id: \"canvas\",\n    width: width,\n    height: height,\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Canvas, \"/Aimwf60WMrkvRigDev73OznYx0=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx"],"names":["React","useState","useRef","useEffect","Canvas","isDrawing","setIsDrawing","canvasRef","contextRef","width","setWidth","window","innerWidth","height","setHeight","innerHeight","canvas","current","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","save","lineTo","stroke","flex","overflowY","overflowX"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nfunction Canvas() {\n\n    const [isDrawing, setIsDrawing] = useState(false)\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    const [width, setWidth] = useState(window.innerWidth * 2);\n    const [height, setHeight] = useState(window.innerHeight * 2);\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n        // canvas.width = window.innerWidth * 2;\n        // canvas.height = window.innerHeight * 2;\n        canvas.style.width = `${window.innerWidth}px`;\n        canvas.style.height = `${window.innerHeight}px`;\n\n        const context = canvas.getContext(\"2d\")\n        context.scale(2, 2);\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }, []);\n\n    const startDrawing = ({ nativeEvent }) => {\n\n        const { offsetX, offsetY } = nativeEvent;\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    };\n\n    const finishDrawing = () => {\n        contextRef.current.closePath();\n        setIsDrawing(false);\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n\n        if (offsetX > width / 4) {\n            contextRef.save;\n            setWidth(width * 2);\n        }\n\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n    };\n\n\n\n    return <canvas style={{ flex: \"1\", overflowY: \"scroll\", overflowX: \"scroll\" }}\n        ref={canvasRef}\n        id=\"canvas\"\n        width={width}\n        height={height}\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrawing}\n        onMouseMove={draw}\n    >\n\n    </canvas>\n}\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}