{"ast":null,"code":"var _jsxFileName = \"/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Canvas() {\n  _s();\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastPoint, setLastPoint] = useState(0);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [width, setWidth] = useState(1440);\n  const [height, setHeight] = useState(585);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = width * 2;\n    canvas.height = height * 2;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n\n    if (lastPoint > width / 4) {\n      setWidth(prev => {\n        return prev * 2;\n      });\n      const canvas = canvasRef.current;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      const context = canvas.getContext(\"2d\");\n      context.scale(2, 2);\n      context.lineCap = \"round\";\n      context.strokeStyle = \"black\";\n      context.lineWidth = 5;\n      contextRef.current = context;\n    }\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    setLastPoint(prev => {\n      console.log(prev);\n      return Math.max(prev, offsetX);\n    });\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxHeight: \"585px\",\n      maxWidth: \"1040px\",\n      overflow: \"auto\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Canvas, \"iAh65ZXQEw3yDXned+V0OqIC+m4=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/samikshagarg/Desktop/Web Development/OurOneNote/src/components/Canvas.jsx"],"names":["React","useState","useRef","useEffect","Canvas","isDrawing","setIsDrawing","lastPoint","setLastPoint","canvasRef","contextRef","width","setWidth","height","setHeight","canvas","current","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","prev","draw","console","log","Math","max","lineTo","stroke","maxHeight","maxWidth","overflow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAEd,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAMQ,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMQ,UAAU,GAAGR,MAAM,CAAC,IAAD,CAAzB;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,GAAD,CAApC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,MAAM,GAAGN,SAAS,CAACO,OAAzB;AAEAD,IAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAK,GAAG,CAAvB;AACAI,IAAAA,MAAM,CAACF,MAAP,GAAgBA,MAAM,GAAG,CAAzB;AACAE,IAAAA,MAAM,CAACE,KAAP,CAAaN,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAI,IAAAA,MAAM,CAACE,KAAP,CAAaJ,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AAEA,UAAMK,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,IAAAA,OAAO,CAACI,WAAR,GAAsB,OAAtB;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAb,IAAAA,UAAU,CAACM,OAAX,GAAqBE,OAArB;AACH,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMM,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB;AAEtC,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AACAf,IAAAA,UAAU,CAACM,OAAX,CAAmBY,SAAnB;AACAlB,IAAAA,UAAU,CAACM,OAAX,CAAmBa,MAAnB,CAA0BH,OAA1B,EAAmCC,OAAnC;AACArB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAND;;AAQA,QAAMwB,aAAa,GAAG,MAAM;AACxBpB,IAAAA,UAAU,CAACM,OAAX,CAAmBe,SAAnB;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,QAAIC,SAAS,GAAGI,KAAK,GAAG,CAAxB,EAA2B;AACvBC,MAAAA,QAAQ,CAACoB,IAAI,IAAI;AACb,eAAOA,IAAI,GAAG,CAAd;AACH,OAFO,CAAR;AAIA,YAAMjB,MAAM,GAAGN,SAAS,CAACO,OAAzB;AAGAD,MAAAA,MAAM,CAACE,KAAP,CAAaN,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAI,MAAAA,MAAM,CAACE,KAAP,CAAaJ,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AAEA,YAAMK,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,MAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB;AACAF,MAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,MAAAA,OAAO,CAACI,WAAR,GAAsB,OAAtB;AACAJ,MAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAb,MAAAA,UAAU,CAACM,OAAX,GAAqBE,OAArB;AACH;AACJ,GAtBD;;AAwBA,QAAMe,IAAI,GAAG,CAAC;AAAER,IAAAA;AAAF,GAAD,KAAqB;AAC9B,QAAI,CAACpB,SAAL,EAAgB;AACZ;AACH;;AACD,UAAM;AAAEqB,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AAEAjB,IAAAA,YAAY,CAACwB,IAAI,IAAI;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,aAAOI,IAAI,CAACC,GAAL,CAASL,IAAT,EAAeN,OAAf,CAAP;AACH,KAHW,CAAZ;AAKAhB,IAAAA,UAAU,CAACM,OAAX,CAAmBsB,MAAnB,CAA0BZ,OAA1B,EAAmCC,OAAnC;AACAjB,IAAAA,UAAU,CAACM,OAAX,CAAmBuB,MAAnB;AAEH,GAdD;;AAkBA,sBAAO;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,OAAb;AAAsBC,MAAAA,QAAQ,EAAE,QAAhC;AAA0CC,MAAAA,QAAQ,EAAE;AAApD,KAAZ;AAAA,2BACH;AACI,MAAA,GAAG,EAAEjC,SADT;AAEI,MAAA,EAAE,EAAC,QAFP;AAGI,MAAA,WAAW,EAAEe,YAHjB;AAII,MAAA,SAAS,EAAEM,aAJf;AAKI,MAAA,WAAW,EAAEG;AALjB;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,UAAP;AAWH;;GAxFQ7B,M;;KAAAA,M;AA0FT,eAAeA,MAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nfunction Canvas() {\n\n    const [isDrawing, setIsDrawing] = useState(false)\n    const [lastPoint, setLastPoint] = useState(0);\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    const [width, setWidth] = useState(1440);\n    const [height, setHeight] = useState(585);\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n\n        canvas.width = width * 2;\n        canvas.height = height * 2;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        const context = canvas.getContext(\"2d\")\n        context.scale(2, 2);\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }, []);\n\n    const startDrawing = ({ nativeEvent }) => {\n\n        const { offsetX, offsetY } = nativeEvent;\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    };\n\n    const finishDrawing = () => {\n        contextRef.current.closePath();\n        setIsDrawing(false);\n\n        if (lastPoint > width / 4) {\n            setWidth(prev => {\n                return prev * 2;\n            });\n\n            const canvas = canvasRef.current\n\n\n            canvas.style.width = `${width}px`;\n            canvas.style.height = `${height}px`;\n\n            const context = canvas.getContext(\"2d\")\n            context.scale(2, 2);\n            context.lineCap = \"round\";\n            context.strokeStyle = \"black\";\n            context.lineWidth = 5;\n            contextRef.current = context;\n        }\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n\n        setLastPoint(prev => {\n            console.log(prev);\n            return Math.max(prev, offsetX);\n        });\n\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n\n    };\n\n\n\n    return <div style={{ maxHeight: \"585px\", maxWidth: \"1040px\", overflow: \"auto\" }}>\n        <canvas\n            ref={canvasRef}\n            id=\"canvas\"\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n        >\n\n        </canvas>\n    </div>\n}\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}